plugins {
    id "java"
    id "eclipse"
    id "idea"
    id "jaci.openrio.gradle.GradleRIO" version "2018.01.11"
    id 'org.hidetake.ssh' version "2.9.0"
}

def TEAM = 488
def ROBOT_CLASS = "competition.Robot"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", jaci.openrio.gradle.frc.RoboRIO) {
            team = TEAM
        }
    }
    artifacts {
        artifact('frcJava', jaci.openrio.gradle.frc.FRCJavaArtifact) {
            targets << "roborio"
        }
    }
}



repositories {
    jcenter()
    
    maven { url "https://mvnrepository.com/artifact/com.google.inject/guice" }
    maven { url "http://first.wpi.edu/FRC/roborio/maven/release"}
    maven { url uri ("../SeriouslyCommonLib/lib/")}
    maven { url "http://www.kauailabs.com/maven2" }
    
    flatDir { dirs '/../SeriouslyCommonLib/build/libs' }
}

// Defining my dependencies. In this case, WPILib (+ friends), CTRE Toolsuite (Talon SRX)
// and NavX.
dependencies {
    compile wpilib()
    compile ctre()
    compile navx()
    compile pathfinder()
    compile openrio.powerup.matchData()
    
    testCompile 'junit:junit:4.12'
   
    compile group: 'com.google.inject', name: 'guice', version: '3.0'
    compile group: 'com.google.inject.extensions', name: 'guice-assistedinject', version: '3.0'
    
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    
    compile project(':SeriouslyCommonLib')
}


 
remotes {
    rio {
        host = 'roboRIO-488-frc.local'
        user = 'admin'
        knownHosts = allowAnyHosts
    }
}

task('copyResources') {
    doLast {
        ssh.run {
            session(remotes.rio) {
                // execute 'mkdir ~/449_resources', ignoreError: true
                // execute 'mkdir /488Logs', ignoreError: true
                put from: fileTree('../SeriouslyCommonLib/lib/log4jConfig/log4j.xml'), into: '/home/lvuser/'
                //execute ". /etc/profile.d/natinst-path.sh; /usr/local/frc/bin/frcKillRobot.sh -t -r", ignoreError: true
            }
        }
    }
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest jaci.openrio.gradle.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}

tasks.withType(Test) {
    testLogging.showStandardStreams = true
    
    afterTest { desc, result -> 
        logger.quiet "Executed test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}
